Index: src/Platformer/Room.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Platformer;\r\n\r\nimport java.awt.*;\r\nimport javax.swing.JPanel;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.util.ArrayList;\r\nimport javax.swing.ImageIcon;\r\n\r\npublic class Room extends JPanel {\r\n    ArrayList<Entity> entityList;       //List of all entities in the room\r\n    private int camX = 0;               //Position of Camera\r\n    public int width;                   //Width of the room\r\n    public int floorY;                  //Height of the floor platform\r\n    private ArrayList<Image> imgList;   //List of all entity images\r\n\r\n    public Room(ArrayList<Entity> entities, int width, int floorY) {\r\n        this.setBackground(Color.BLUE);\r\n        entityList = entities;\r\n        this.width = width;\r\n        this.floorY = floorY;\r\n        imgList = new ArrayList<>();\r\n\r\n        entityList.add(new Platform(0, floorY, width, 900 - floorY)); //Adds ground\r\n        entityList.add(new Platform(-1, 0, 1, 900));           //Adds Left Wall\r\n        entityList.add(new Platform(width, 0, 1, 900));           // Adds Right Wall\r\n\r\n        //Binds all entities to this room and generates list of images\r\n        for (Entity i : entityList) {\r\n            i.setRoom(this);\r\n            //Temp Var to get image sources from entities\r\n            String[] tmpImgs;\r\n            tmpImgs = i.getImgSources();\r\n            //Loops through the sources given and puts them in the list\r\n            for (String o : tmpImgs) {\r\n                //Local Vars to handle images\r\n                ImageIcon imgtmp;\r\n                Image tmp;\r\n                //Sets the image to the given source, and scales it to the entity\r\n                imgtmp = new ImageIcon(o);\r\n                tmp = imgtmp.getImage().getScaledInstance((int) i.getBounds().getWidth(), (int) i.getBounds().getHeight(), Image.SCALE_SMOOTH);\r\n                imgtmp = new ImageIcon(tmp, imgtmp.getDescription());\r\n                tmp = imgtmp.getImage();\r\n                //Adds the scaled image to imgList\r\n                imgList.add(tmp);\r\n            }\r\n            //Sets temp variables\r\n            int[] indexes = new int[tmpImgs.length];\r\n            int total = imgList.size() - indexes.length;\r\n            //Gives entities indexes to display images\r\n            for (int p = total; p < imgList.size(); p++) {\r\n                indexes[p - total] = p;\r\n            }\r\n            i.setImgIndex(indexes);\r\n        }\r\n\r\n        //Adds an event listener\r\n        addKeyListener(new KeyListener() {\r\n\r\n            @Override //Used to use Key Listener (Not actually needed)\r\n            public void keyTyped(KeyEvent keyEvent) {\r\n            }\r\n\r\n            @Override //Allows the player to listen for events\r\n            public void keyPressed(KeyEvent keyEvent) {\r\n                for (Entity i : entityList) {\r\n                    if (i instanceof Player)\r\n                        ((Player) i).keyPressed(keyEvent);\r\n                }\r\n            }\r\n\r\n            @Override //Allows the player to listen for events\r\n            public void keyReleased(KeyEvent keyEvent) {\r\n                for (Entity i : entityList) {\r\n                    if (i instanceof Player)\r\n                        ((Player) i).keyReleased(keyEvent);\r\n                }\r\n            }\r\n        });\r\n        setFocusable(true); //Allows the player to listen for events\r\n    }\r\n\r\n    //Steps all entities in room\r\n    public void step() {\r\n        for (int i = 0; i < entityList.size(); i++) {\r\n            entityList.get(i).step();                                    //Steps Every entity in room\r\n            if (entityList.get(i) instanceof Player) {                   //Checks if entity is a player\r\n                if (((Player) entityList.get(i)).getHealth() <= 0) {     //If player health is < 0, player object is\r\n                    entityList.remove(i);                                //deleted\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Displays all entities in room\r\n    public void paint(Graphics g) {\r\n        super.paint(g); //Clears Screen\r\n        Graphics2D g2d = (Graphics2D) g;\r\n        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); //Smoother edges\r\n        //Displays entities and images\r\n        for (Entity i : entityList) {\r\n            i.paint(g2d);\r\n            //Checks if entity wants to be flipped, if so it is flipped\r\n            if (i.facingRight()) {\r\n                g.drawImage(imgList.get(i.getImgIndex()), i.getX() - camX, i.getY(), (int) i.getBounds().getWidth(), (int) i.getBounds().getHeight(), null);\r\n            } else {\r\n                g.drawImage(imgList.get(i.getImgIndex()), (int) (i.getX() - camX + i.getBounds().getWidth()), i.getY(), -(int) i.getBounds().getWidth(), (int) i.getBounds().getHeight(), null);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //Adds mv to Camera position. Camera will not extend past the room borders unless the room is smaller than camera.\r\n    public void addCamX(double mv) {\r\n        if (camX + mv >= 0 && camX + mv <= width - 1600) {\r\n            camX += mv;\r\n        } else if (camX + mv > width - 1600) {\r\n            while (camX + 1 <= width - 1600) {\r\n                camX++;\r\n            }\r\n        } else {\r\n            while (camX - 1 >= 0) {\r\n                camX--;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Allows other objects to get camera position\r\n    public int getCamX() {\r\n        return camX;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Platformer/Room.java	(revision f64a0cd5cfbb4d91497773b1a95e7df1de07c953)
+++ src/Platformer/Room.java	(date 1588489829341)
@@ -24,6 +24,7 @@
         entityList.add(new Platform(0, floorY, width, 900 - floorY)); //Adds ground
         entityList.add(new Platform(-1, 0, 1, 900));           //Adds Left Wall
         entityList.add(new Platform(width, 0, 1, 900));           // Adds Right Wall
+        entityList.add(new Platform(2400,500,400,50));
 
         //Binds all entities to this room and generates list of images
         for (Entity i : entityList) {
Index: src/Platformer/Runner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Platformer;\r\n\r\nimport javax.swing.JFrame;\r\nimport java.util.ArrayList;\r\n\r\npublic class Runner {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        //Creates Window\r\n        JFrame frame = new JFrame(\"Platformer\");\r\n        //Creates list of entities to be placed into room\r\n        ArrayList<Entity> entities = new ArrayList<>();\r\n        //Adds new entities to list (Floor and boundaries are automatically added to room\r\n        entities.add(new Platform(300, 400, 150, 100));\r\n        entities.add(new Assassin(200, 200, 150, 200, 1));\r\n        entities.add(new Bot(500,200,100,299,1));\r\n        //Creates new room, sets width of room and heigth of floor. Also passes list of entities into the room\r\n        Room testingRoom = new Room(entities, 4021, 766);\r\n        //Puts the room onto the screen\r\n        frame.add(testingRoom);\r\n        //Sets attributes to the window (Size, visibility, close operation, resizability)\r\n        frame.setSize(1600, 900);\r\n        frame.setVisible(true);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setResizable(false);\r\n        //Core game loop; Steps game and refreshes the look. Then waits 16 ms to achieve 60 fps.\r\n        while (true) {\r\n            testingRoom.step();\r\n            testingRoom.repaint();\r\n            Thread.sleep(16);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Platformer/Runner.java	(revision de7b532ab828786e1f286c70dcf6eaa3f738bfab)
+++ src/Platformer/Runner.java	(date 1588493122753)
@@ -12,7 +12,7 @@
         //Adds new entities to list (Floor and boundaries are automatically added to room
         entities.add(new Platform(300, 400, 150, 100));
         entities.add(new Assassin(200, 200, 150, 200, 1));
-        entities.add(new Bot(500,200,100,299,1));
+        entities.add(new Bot(500,200,100,75,1));
         //Creates new room, sets width of room and heigth of floor. Also passes list of entities into the room
         Room testingRoom = new Room(entities, 4021, 766);
         //Puts the room onto the screen
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"92acb7fe-7559-4c30-8e06-a3858bf37b7d\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/Platformer/Room.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Platformer/Room.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1bO22KqXxF39GdKhkRSygYn2Jfa\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Runner\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Platformer.Runner\" />\r\n      <module name=\"Basics\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"Platformer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Runner\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"92acb7fe-7559-4c30-8e06-a3858bf37b7d\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1588488611254</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1588488611254</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"414\" y=\"175\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1588489577779\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"414\" y=\"175\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040@0.0.1920.1040\" timestamp=\"1588489577779\" />\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1588489664456\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.bottom/0.0.1920.1040@0.0.1920.1040\" timestamp=\"1588489664456\" />\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.center\" timestamp=\"1588489664456\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.center/0.0.1920.1040@0.0.1920.1040\" timestamp=\"1588489664456\" />\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.left\" timestamp=\"1588489664456\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.left/0.0.1920.1040@0.0.1920.1040\" timestamp=\"1588489664456\" />\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.right\" timestamp=\"1588489664456\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1921\" height=\"282\" key=\"GridCell.Tab.0.right/0.0.1920.1040@0.0.1920.1040\" timestamp=\"1588489664456\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision de7b532ab828786e1f286c70dcf6eaa3f738bfab)
+++ .idea/workspace.xml	(date 1588493607501)
@@ -2,12 +2,23 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="92acb7fe-7559-4c30-8e06-a3858bf37b7d" name="Default Changelist" comment="">
+      <change afterPath="$PROJECT_DIR$/src/Platformer/Bot.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Platformer/Enemy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Platformer/Enemy.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Platformer/Room.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Platformer/Room.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Platformer/Runner.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Platformer/Runner.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
   </component>
   <component name="ProjectId" id="1bO22KqXxF39GdKhkRSygYn2Jfa" />
   <component name="ProjectViewState">
@@ -53,25 +64,33 @@
     <servers />
   </component>
   <component name="WindowStateProjectService">
-    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1588489577779">
+    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1588492860136">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
-    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1588489577779" />
-    <state width="1921" height="282" key="GridCell.Tab.0.bottom" timestamp="1588489664456">
+    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1588492860136" />
+    <state x="743" y="357" key="#com.intellij.refactoring.move.moveInstanceMethod.MoveInstanceMethodDialog" timestamp="1588493254011">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
-    <state width="1921" height="282" key="GridCell.Tab.0.bottom/0.0.1920.1040@0.0.1920.1040" timestamp="1588489664456" />
-    <state width="1921" height="282" key="GridCell.Tab.0.center" timestamp="1588489664456">
+    <state x="743" y="357" key="#com.intellij.refactoring.move.moveInstanceMethod.MoveInstanceMethodDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1588493254011" />
+    <state x="268" y="169" width="440" height="577" key="FileChooserDialogImpl" timestamp="1588492086320">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
-    <state width="1921" height="282" key="GridCell.Tab.0.center/0.0.1920.1040@0.0.1920.1040" timestamp="1588489664456" />
-    <state width="1921" height="282" key="GridCell.Tab.0.left" timestamp="1588489664456">
+    <state x="268" y="169" width="440" height="577" key="FileChooserDialogImpl/0.0.1920.1040@0.0.1920.1040" timestamp="1588492086320" />
+    <state width="1921" height="283" key="GridCell.Tab.0.bottom" timestamp="1588493333761">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
-    <state width="1921" height="282" key="GridCell.Tab.0.left/0.0.1920.1040@0.0.1920.1040" timestamp="1588489664456" />
-    <state width="1921" height="282" key="GridCell.Tab.0.right" timestamp="1588489664456">
+    <state width="1921" height="283" key="GridCell.Tab.0.bottom/0.0.1920.1040@0.0.1920.1040" timestamp="1588493333761" />
+    <state width="1921" height="283" key="GridCell.Tab.0.center" timestamp="1588493333761">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
-    <state width="1921" height="282" key="GridCell.Tab.0.right/0.0.1920.1040@0.0.1920.1040" timestamp="1588489664456" />
+    <state width="1921" height="283" key="GridCell.Tab.0.center/0.0.1920.1040@0.0.1920.1040" timestamp="1588493333761" />
+    <state width="1921" height="283" key="GridCell.Tab.0.left" timestamp="1588493333761">
+      <screen x="0" y="0" width="1920" height="1040" />
+    </state>
+    <state width="1921" height="283" key="GridCell.Tab.0.left/0.0.1920.1040@0.0.1920.1040" timestamp="1588493333761" />
+    <state width="1921" height="283" key="GridCell.Tab.0.right" timestamp="1588493333761">
+      <screen x="0" y="0" width="1920" height="1040" />
+    </state>
+    <state width="1921" height="283" key="GridCell.Tab.0.right/0.0.1920.1040@0.0.1920.1040" timestamp="1588493333761" />
   </component>
 </project>
\ No newline at end of file
Index: src/Platformer/Enemy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Platformer;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.Random;\r\n\r\npublic abstract class Enemy implements Entity {\r\n    /* Variables\r\n     * x & y - Position of Player\r\n     * w & h - Dimensions of Player (Hit box)\r\n     * walkSpeed - Horizontal Distance Player Travels each step\r\n     * weapIndex - Which weapon player uses 0, 1, or 2\r\n     * grv & hAcc - Gravity (Vertical Acceleration) and horizontal acceleration\r\n     * vSpd & hSpd - Speed player is travelling (Vertical and Horizontal)\r\n     * upState, downState, rightState, & leftState - Detects of keys that are being pressed\r\n     * room - The room the player is in\r\n     * imgIndex - The indexes the room uses to display images\r\n     * canJump - True if player can jump. If player is in the air, it is false */\r\n    protected int x, y, w, h, walkSpeed, weapIndex, healthPoints, manaPoints, maxHealth, maxMana;\r\n    protected double grv, vSpd, hSpd, jumpHeight, hAcc;\r\n    protected boolean upState = false, rightState = false, leftState = false, downState = false, facingRight = true,\r\n            canJump = false;\r\n    protected Room room;\r\n    protected int[] imgIndex;\r\n    Random rand;\r\n\r\n    //Sets Variables\r\n    public Enemy(int x, int y, int w, int h, int i) {\r\n        walkSpeed = 13;\r\n        healthPoints = 100;\r\n        manaPoints = 100;\r\n        hSpd = 0;\r\n        vSpd = 0;\r\n        jumpHeight = 0;\r\n        maxHealth = 100;\r\n        maxMana = 100;\r\n        grv = 1.5;\r\n        hAcc = 2;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n        Random rand = new Random();\r\n    }\r\n\r\n    public void setRoom(Room room) {\r\n        this.room = room;\r\n    }\r\n\r\n    abstract void remove();\r\n\r\n    abstract void spawn();\r\n\r\n    public int getWeapIndex() {\r\n        return weapIndex;\r\n    }\r\n\r\n    public void setWeapIndex(int weap) {\r\n        weapIndex = weap;\r\n    }\r\n\r\n    int getHealth() {\r\n        return this.healthPoints;\r\n    }\r\n\r\n    public boolean facingRight() {\r\n        return facingRight;\r\n    }\r\n\r\n    void setHealth(int damage) {\r\n        this.healthPoints -= damage;    //subtracts damage make damage negative for heals\r\n        if (this.healthPoints > this.maxHealth) {\r\n            this.healthPoints = this.maxHealth;\r\n        }\r\n    }\r\n\r\n    int getMana() {\r\n        return this.manaPoints;\r\n    }\r\n\r\n    void setMana(int cost) {\r\n        this.manaPoints -= cost;            //subtracts mana used, make negative for regened mana\r\n        if (this.manaPoints > this.maxMana) {\r\n            this.manaPoints = this.maxMana;\r\n        }\r\n    }\r\n\r\n    //Handles Collision and Movement of Player\r\n    public void step() {\r\n        int rightInt = 0;    //Used to determine Direction player is moving\r\n        int leftInt = 0;     //Used to determine Direction player is moving\r\n        if (rightState)\r\n            rightInt = 1;\r\n        if (leftState)\r\n            leftInt = 1;\r\n        int move = rightInt - leftInt; //-1 = left, 0 = still, 1 = right\r\n\r\n        if (move == -1) {\r\n            facingRight = false;\r\n        }\r\n        if (move == 1) {\r\n            facingRight = true;\r\n        }\r\n\r\n        //Implements player's acceleration on the ground. Air acceleration is 2 times ground acceleration\r\n        //Max speed is equal to walk speed\r\n        if (canJump)\r\n            hAcc = move * 2;\r\n        else\r\n            hAcc = move;\r\n\r\n        //Implements faster deceleration when player is crouched\r\n        if (downState && canJump) {\r\n            hAcc = 0;\r\n            hSpd *= 0.85;\r\n            if (Math.abs(hSpd) < 1)\r\n                hSpd = 0;\r\n        }\r\n\r\n        //The deceleration when the player is not crouched\r\n        else if (move == 0) {\r\n            hSpd = 0.9 * hSpd;\r\n            if (Math.abs(hSpd) < 1)\r\n                hSpd = 0;\r\n        }\r\n\r\n        //Increases/Decreases hSpd by hAcc\r\n        hSpd += hAcc;\r\n\r\n        //Limits speed of player\r\n        if (walkSpeed < Math.abs(hSpd))\r\n            hSpd = sign(hSpd) * walkSpeed;\r\n\r\n        //Changes vSpd for gravity\r\n        vSpd += grv;\r\n\r\n        //Used to determine if player can jump or is in the air\r\n        canJump = false;\r\n        //Checks all entities for Platforms\r\n        for (Entity i : room.entityList) {\r\n            if (i instanceof Platform) {\r\n                //Checks if Platform is directly below. If so, player can jump. Stays true once it becomes true\r\n                if (!canJump) {\r\n                    canJump = i.getBounds().intersects(new Rectangle(x, y + 1, w, h));\r\n                }\r\n                if (canJump && upState) {\r\n                    vSpd = jumpHeight * -1; //Sends player upward (Jump)\r\n                    downState = false;\r\n                }\r\n                /* Checks if player will collide with a platform in the next step. If so, it\r\n                 * will move the player as close to the platform as possible without intersecting it.\r\n                 * Then, it sets vSpd/hSpd to 0, so it will not move in the direction. */\r\n                if (i.getBounds().intersects(new Rectangle(x + (int) hSpd, y, w, h))) {\r\n                    while (!i.getBounds().intersects(new Rectangle(x + (int) sign(hSpd), y, w, h))) {\r\n                        x += sign((int) hSpd);\r\n                    }\r\n                    hSpd = 0;\r\n                }\r\n                if (i.getBounds().intersects(new Rectangle(x, y + (int) vSpd, w, h))) {\r\n                    while (!i.getBounds().intersects(new Rectangle(x, y + (int) sign(vSpd), w, h))) {\r\n                        y += sign((int) vSpd);\r\n                    }\r\n                    vSpd = 0;\r\n                }\r\n                //Tests if player is inside a platform, and pushes player horizontally out of the shortest side\r\n                if (i.getBounds().intersects(new Rectangle(x, y, w, h))) {\r\n                    int distRight = Math.abs((int) (i.getBounds().getX() - (x + w)));\r\n                    int distLeft = Math.abs((int) (x - (i.getBounds().getX() + i.getBounds().getWidth())));\r\n                    if (distRight < distLeft) {\r\n                        x = (int) (i.getBounds().getX() - w);\r\n                    } else\r\n                        x = (int) (i.getBounds().getX() + i.getBounds().getWidth());\r\n                }\r\n            }\r\n        }\r\n\r\n        if (downState && h == 200 && canJump) {\r\n            h = 100;\r\n            y += 100;\r\n        } else if (!downState && h == 100) {\r\n            h = 200;\r\n            y -= 100;\r\n        }\r\n        //Changes player's position\r\n        x += hSpd;\r\n        y += vSpd;\r\n\r\n    }\r\n\r\n    //Displays player (Placeholder until we add a real sprite)\r\n    public void paint(Graphics2D g) {\r\n        g.setColor(new Color(74, 10, 111, 100));\r\n        if (canJump)\r\n            g.setColor(new Color(74, 10, 111));\r\n        g.fillRect(x - room.getCamX(), y, w, h);\r\n    }\r\n\r\n    //Returns the enemy's' hit box\r\n    public Rectangle getBounds() {\r\n        return new Rectangle(x, y, w, h);\r\n    }\r\n\r\n    //Checks if keys are down.\r\n    public void keyPressed(KeyEvent k) {\r\n        int move= rand.nextInt(3);\r\n        if (move == 0) {\r\n            upState = true;\r\n            leftState = false;\r\n            rightState = false;\r\n            downState = false;\r\n\r\n        }\r\n        if (move == 1) {\r\n            rightState = true;\r\n            upState = false;\r\n            leftState = false;\r\n            downState = false;\r\n        }\r\n        if (move == 2) {\r\n            upState = false;\r\n            leftState = false;\r\n            rightState = false;\r\n            downState = false;\r\n        }\r\n        if (move == 3) {\r\n            upState = false;\r\n            leftState = false;\r\n            rightState = false;\r\n            downState = false;\r\n        }\r\n        /*\r\n        if (k.getKeyCode() == KeyEvent.VK_UP) {\r\n            upState = true;\r\n        }\r\n        if (k.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n            rightState = true;\r\n        }\r\n        if (k.getKeyCode() == KeyEvent.VK_LEFT) {\r\n            leftState = true;\r\n        }\r\n        if (k.getKeyCode() == KeyEvent.VK_DOWN) {\r\n            downState = true;\r\n        }\r\n         */\r\n\r\n    }\r\n\r\n    //Returns 1, -1, or 0 depending on the sign of the input\r\n    private double sign(double num) {\r\n        if (num != 0)\r\n            return (num / Math.abs(num));\r\n        return (0);\r\n    }\r\n\r\n    //Returns X position\r\n    public int getX() {\r\n        return x;\r\n    }\r\n\r\n    //Returns Y Position\r\n    public int getY() {\r\n        return y;\r\n    }\r\n\r\n    //Returns All Image Sources in Order\r\n    public String[] getImgSources() {\r\n        return new String[]{\"src/Platformer/Images/stockImage.png\"};\r\n    }\r\n\r\n    //Sets the list of indexes to display images\r\n    public void setImgIndex(int[] nums) {\r\n        imgIndex = nums;\r\n    }\r\n\r\n    //Contains logic for which image is to be displayed at a point in time\r\n    public int getImgIndex() {\r\n        return (imgIndex[0]);\r\n    }\r\n\r\n    //Returns whether or not a player can jump\r\n    public boolean canJump() {\r\n        return canJump;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Platformer/Enemy.java	(revision de7b532ab828786e1f286c70dcf6eaa3f738bfab)
+++ src/Platformer/Enemy.java	(date 1588493331010)
@@ -201,28 +201,31 @@
     }
 
     //Checks if keys are down.
-    public void keyPressed(KeyEvent k) {
-        int move= rand.nextInt(3);
-        if (move == 0) {
+    public void keyPressed() {
+        System.out.println("key pressed");
+        int decide= rand.nextInt(3);
+        System.out.println(decide);
+
+        if (decide == 0) {
             upState = true;
             leftState = false;
             rightState = false;
             downState = false;
 
         }
-        if (move == 1) {
+        if (decide == 1) {
             rightState = true;
             upState = false;
             leftState = false;
             downState = false;
         }
-        if (move == 2) {
+        if (decide == 2) {
             upState = false;
             leftState = false;
             rightState = false;
             downState = false;
         }
-        if (move == 3) {
+        if (decide == 3) {
             upState = false;
             leftState = false;
             rightState = false;
Index: src/Platformer/Bot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Platformer/Bot.java	(date 1588491295464)
+++ src/Platformer/Bot.java	(date 1588491295464)
@@ -0,0 +1,106 @@
+package Platformer;
+
+
+public class Bot extends Enemy {
+    private int maxHealth, maxMana, healthPoints, manaPoints, weaponIndex, mvTimer;
+
+    public Bot(int x, int y, int w, int h, int i) {
+        super(x, y, w, h, i);
+        this.weaponIndex = i;
+        maxHealth = 0;
+        maxMana = 0;
+        healthPoints = 0;
+        manaPoints = 0;
+        setStats(10, 100, 20, 33);//Health Points, Mana Points, Walk Speed, Jump Height
+    }
+
+    void remove() {
+
+    }
+
+    void spawn() {
+
+    }
+
+    public String[] getImgSources() {
+        //List of all assassin image sources. Index in this list correlates to imgIndex.
+        return new String[]{"src/Platformer/Images/Assassin/assassinNeutral.PNG",
+                "src/Platformer/Images/Assassin/assassinUp.PNG", "src/Platformer/Images/Assassin/assassinDown.png",
+                "src/Platformer/Images/Assassin/assassinRunning1.PNG", "src/Platformer/Images/Assassin/assassinRunning2.PNG",
+                "src/Platformer/Images/Assassin/assassinRunning3.PNG", "src/Platformer/Images/Assassin/assassinRunning4.PNG",
+                "src/Platformer/Images/Assassin/assassinRunning5.PNG", "src/Platformer/Images/Assassin/assassinRunning6.PNG",
+                "src/Platformer/Images/Assassin/assassinRunning7.PNG", "src/Platformer/Images/Assassin/assassinRunning8.PNG",
+                "src/Platformer/Images/Assassin/assassinSkid.PNG", "src/Platformer/Images/Assassin/assassinSkidBack.PNG",
+                "src/Platformer/Images/Assassin/assassinCrouch.PNG"};
+    }
+
+    public void setImgIndex(int[] nums) {
+        imgIndex = nums;
+    }
+
+    public int getImgIndex() {
+        //Checks if player is in the air
+        if (vSpd >= 0 && !canJump) {
+            return (imgIndex[2]);
+        }
+        if (vSpd < 0) {
+            return (imgIndex[1]);
+        }
+
+        //Checks if player is crouching and resets running animation
+        if (downState) {
+            mvTimer = 0;
+            return imgIndex[13];
+        }
+        //Checks if player staying still
+        if (Math.abs(hSpd) < 1 || mvTimer == 0) {
+            return imgIndex[0];
+        }
+        //Player is on ground moving. Animation of 8 frames running at 12 frames per second
+        else {
+            //Skidding Animation & Skidding backwards animation. Resets running animation
+            if (!leftState && !rightState) {
+                mvTimer=0;
+                if ((hSpd > 0 && facingRight) || (hSpd < 0 && !facingRight))
+                    return imgIndex[11];
+                return imgIndex[12];
+            }
+            //Iterates through the running animation
+            int mvMod = mvTimer % 40;
+            if (mvMod == 0)
+                return imgIndex[10];
+            if (mvMod <= 5)
+                return imgIndex[3];
+            if (mvMod <= 10)
+                return imgIndex[4];
+            if (mvMod <= 15)
+                return imgIndex[5];
+            if (mvMod <= 20)
+                return imgIndex[6];
+            if (mvMod <= 25)
+                return imgIndex[7];
+            if (mvMod <= 30)
+                return imgIndex[8];
+            if (mvMod <= 35)
+                return imgIndex[9];
+            return imgIndex[10];
+        }
+    }
+
+    public void step() {
+        super.step();                //Calls Player.step()
+        if (hSpd != 0 && canJump)    //Checks if player is on the ground running
+            mvTimer++;                //Iterates through running frames
+        else
+            mvTimer = 0;            //Resets animation once player stops
+    }
+
+    public void setStats(int totHealth, int totMana, int theWalkSpeed, int theJumpHeight) {
+        this.maxHealth = totHealth;
+        this.maxMana = totMana;
+        this.healthPoints = totHealth;
+        this.manaPoints = totMana;
+        this.walkSpeed = theWalkSpeed;
+        this.jumpHeight = theJumpHeight;
+    }
+}
